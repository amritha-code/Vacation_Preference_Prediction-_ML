# -*- coding: utf-8 -*-
"""Streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_SNBSuTPhOf3qHZDJiUO8c8Rgzve9k30
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler

# -------------------- Data Preparation and Model Training --------------------

# Load your dataset
df = pd.read_csv("/content/mountains_vs_beaches_preferences.csv")  # Replace with your dataset path

# Define features and target
X = df.drop("Preference", axis=1)  # Replace "Preference" with the name of your target column
y = df["Preference"]

# Encode categorical features
label_encoders = {}
for col in X.select_dtypes(include="object").columns:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])
    label_encoders[col] = le

# Save label encoders
joblib.dump(label_encoders, "label_encoders.joblib")

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale numerical features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Save the scaler
joblib.dump(scaler, "scaler.joblib")

# Train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train_scaled, y_train)

# Save the trained model
joblib.dump(model, "vacation_model.joblib")

# -------------------- Streamlit App --------------------

# Load pre-trained model, scaler, and encoders
model = joblib.load("vacation_model.joblib")
scaler = joblib.load("scaler.joblib")
label_encoders = joblib.load("label_encoders.joblib")

# Apply custom CSS styling
st.markdown("""
    <style>
    .stApp {
        background-color: #f0f4f8;
        padding: 20px;
    }

    .stTitle {
        color: #2c3e50;
        font-size: 3em;
        font-weight: bold;
        text-align: center;
    }

    .stButton > button {
        font-size: 1.2em;
        color: white;
        background-color: #3498db;
        border: none;
        padding: 0.6em 1em;
        border-radius: 8px;
        cursor: pointer;
    }

    .stButton > button:hover {
        background-color: #2980b9;
    }

    .result-text {
        font-size: 1.5em;
        color: #16a085;
        font-weight: bold;
        text-align: center;
        margin-top: 1em;
    }
    </style>
    """, unsafe_allow_html=True)

# Title and description
st.title("üå¥ Predict Your Vacation Preference: Mountains or Beaches?")
st.write("Enter your details to find out your ideal vacation destination!")

# Collect user inputs
st.subheader("Personal Information")
gender = st.selectbox("Gender", label_encoders["Gender"].classes_)
age = st.number_input("Age", min_value=18, max_value=100, step=1)
income = st.number_input("Annual Income (in USD)", min_value=0, step=500)
education = st.selectbox("Education_Level", label_encoders["Education_Level"].classes_)

st.subheader("Travel Preferences")
travel_frequency = st.number_input("Travel_Frequency (per year)", min_value=0, step=1)
preferred_activity = st.selectbox("Preferred_Activity", label_encoders["Preferred_Activities"].classes_)
vacation_budget = st.number_input("Vacation_Budget (in USD)", min_value=0, step=500)
favorite_season = st.selectbox("Favorite_Season", label_encoders["Favorite_Season"].classes_)

st.subheader("Location Information")
location = st.selectbox("Location Type", label_encoders["Location"].classes_)
proximity_to_mountains = st.number_input("Proximity_to_Mountains (in miles)", min_value=0, step=1)
proximity_to_beaches = st.number_input("Proximity_to_Beaches (in miles)", min_value=0, step=1)

st.subheader("Additional Factors")
pets = st.selectbox("Do you own pets?", ["No", "Yes"])
environmental_concerns = st.selectbox("Do you have environmental concerns?", ["No", "Yes"])

# Prepare input data
user_data = {
    "Gender": gender,
    "Age": age,
    "Income": income,
    "Education_Level": education,  # Change "Education Level" to "Education_Level"
    "Travel_Frequency": travel_frequency,
    "Preferred_Activities": preferred_activity,
    "Vacation_Budget": vacation_budget,
    "Location": location,
    "Proximity_to_Mountains": proximity_to_mountains,
    "Proximity_to_Beaches": proximity_to_beaches,
    "Favorite_Season": favorite_season,
    "Pets": 1 if pets == "Yes" else 0,
    "Environmental Concerns": 1 if environmental_concerns == "Yes" else 0,
}

# Encode categorical features
for feature in label_encoders:
    user_data[feature] = label_encoders[feature].transform([user_data[feature]])[0]

# Combine numerical and encoded features into a single input array
input_data = np.array([
    user_data["Age"],
    user_data["Income"],
    user_data["Travel_Frequency"],
    user_data["Vacation_Budget"],
    user_data["Proximity_to_Mountains"],
    user_data["Proximity_to_Beaches"],
    user_data["Pets"],
    user_data["Environmental Concerns"],
    user_data["Gender"],
    user_data["Education_Level"],
    user_data["Preferred_Activities"],
    user_data["Location"],
    user_data["Favorite_Season"]
]).reshape(1, -1)

# Scale the input data
scaled_data = scaler.transform(input_data)

# Prediction logic
if st.button("Predict My Vacation Preference"):
    prediction = model.predict(scaled_data)
    preference = "Mountains" if prediction[0] == 0 else "Beaches"
    st.markdown(f'<p class="result-text">üåü Your ideal vacation spot is: **{preference}**</p>', unsafe_allow_html=True)

# Footer
st.markdown("<div style='text-align: center; margin-top: 2em;'>Developed with ‚ù§Ô∏è by Amritha K</div>", unsafe_allow_html=True)